Kapitel 8.3.2.: Preisgranularität

   Mit einem wertbasierten Ansatz habe ich dann einen starken Anreiz dazu:       die Betriebskosten des Projekts zu reduzieren, denn je billiger es ist, desto mehr Gewinn mache ich.
      zuverlässigkeit bieten, denn wenn das System ausfiel, verdiente ich kein Geld.
      sicherstellen, dass das System die Wertmetrik maximiert. Im Fall von LFP war diese Metrik "Leads generieren".

   Aber ich hatte auch Fragen, wo ich investieren sollte. Im Fall von LFP lief es sehr gut (das war vor den Budgetschwindeleien) und so entschied ich mich, zusätzliche 100.000 Dollar zu investieren. Aber wo soll ich das Geld am besten einsetzen? In die Verbesserung der Zuverlässigkeit der Website? Senkung der Betriebskosten der Anwendung durch besseren Code? Maximierung der Anzahl der Benutzer durch Marketing? Verbesserung der Umwandlung von Benutzern in Leads? Welche Entscheidung bringt mir die bessere Rendite? Diese Frage ist besonders schwer zu beantworten, wenn Sie die Betriebskosten einer Anwendung nicht effektiv über das Winken mit der Hand hinaus bestimmen können oder wenn andere Daten auch nur vermutet werden

   Einer der großen Vorteile von Zimki (unserem Platform-as-a-Service-Spiel im Jahr 2006) war nicht nur seine serverlose Natur und wie Sie einfach Code über eine Online-IDE schreiben konnten, sondern auch seine Preisgranularität war bis auf die Funktion. Das war kein Zufall, denn ich hatte ein echtes Bedürfnis, dies zu wissen. Jede Anwendung ist nichts anderes als eine High-Level-Funktion, die andere Funktionen aufruft. Wenn ich eine Funktion in Zimki entwickelte, konnte ich bei jedem Aufruf dieser Funktion genau sehen, wie viel sie mich gekostet hatte. Mir wurden die Netzwerk-, Speicher- und Rechenressourcen berechnet, die von dieser Funktion verwendet wurden. Das war eine ziemliche Offenbarung. Es änderte das Verhalten erheblich, denn plötzlich konnte ich in dem Meer von Code, das meine Anwendung darstellt, einzelne Funktionen finden, die mich unverhältnismäßig mehr kosteten

   Soweit ich weiß, war diese Preisgestaltung pro Funktion im Jahr 2006 in der IT-Welt beispiellos und wir sahen keine vergleichbare Preisgranularität, bis AWS Lambda 2014 eingeführt wurde. Nun war ich natürlich auch der Anbieter von Zimki und hinter den Kulissen gab es eine komplexe Reihe von Warenkorbkonzepten und alle möglichen Finanzinstrumente, um diese Kostenzahlen bereitstellen zu können. Aber das war für den Entwickler abstrahiert. Alles, was sie sahen, waren die Kosten, die jedes Mal anfielen, wenn ihre Funktion lief, egal wie sehr sie skalierte. Es gab keine Kapitalinvestition und das machte die Betriebskosten einer Anwendung zu einer überschaubaren Größe.


