Kapitel 5.5.: Verwendung von kontextspezifischem Gameplay: das Stück

   An diesem Punkt, mit einigen kontextspezifischen Spielereien in der Hand, begann ich, mit James, meinem XO und meinem Chief Scientist in unserem Sitzungssaal ein paar Szenarien durchzuspielen. Unser Plan begann sich zu verdichten und wurde durch verschiedene Experimente, die das Unternehmen durchgeführt hatte, erweitert. Nicht zuletzt kam der Leiter meines Frameworks-Teams herein, um mir mitzuteilen, dass sie gerade demonstriert hatten, dass wir ganze Anwendungen (Frontend und Backend) in Javascript entwickeln können

   Gleichzeitig mit der Verfeinerung unseres Spiels hatte ich die Gruppe ermutigt, Komponentendienste unter dem Namen LibApi zu entwickeln, wie in Befreiungs-API, d. h. unsere Freiheit von endlos wiederholten Aufgaben und unserem bestehenden Geschäftsmodell. Zu sagen, dass ich von diesem Experiment hingerissen war, wäre eine Untertreibung meiner reinen Freude. Dieses zufällige Ereignis half, den Plan zu zementieren, der in Abbildung 57 zusammengefasst ist. Ich werde ihn aufschlüsseln und jeden Punkt im Detail durchgehen
Siehe    Abbildung 57: Der Plan für mehr Details.
     * Punkt 1* - der Schwerpunkt des Unternehmens läge auf der Bereitstellung einer Code-Ausführungsplattform als Dienstprogramm neben einem wachsenden Angebot an industrialisierten Komponentendiensten für gängige Aufgaben wie Abrechnung, Messaging, einem Objektspeicher (einer Key-Object-Store-API), E-Mail usw. Alle Komponenten würden über öffentliche APIs zugänglich gemacht werden und der Dienst würde die Möglichkeit bieten, ganze Anwendungen in einer einzigen Sprache - JavaScript - zu entwickeln. Die Wahl fiel auf JavaScript wegen seiner häufigen Verwendung, der Sicherheit der JS-Engine und der Beseitigung von Übersetzungsfehlern, da sowohl der Front- als auch der Backend-Code in derselben Sprache erstellt werden. Die gesamte Umgebung würde auf der Basis von JavaScript-Operationen, Netzwerknutzung und Speicherplatz abgerechnet werden. Es gäbe kein Konzept einer physischen oder virtuellen Maschine
     * Punkt 2* - um die Entwicklung der Plattform zu beschleunigen, würde der gesamte Dienst Open-Source sein. Dies würde es auch anderen Unternehmen ermöglichen, konkurrierende Dienste einzurichten, aber dies war geplant und wünschenswert
     * Punkt 3* - das Ziel war nicht, einen einzigen Zimki-Dienst (der Name für unsere Plattform) zu schaffen, sondern einen wettbewerbsfähigen Marktplatz von Anbietern. Wir wollten ein kleines, aber lukratives Stück eines sehr großen Kuchens ergattern, indem wir den Markt mit unserem eigenen Versorgungsdienst säen und dann die Technologie als Open-Sourcing anbieten. Um zu verhindern, dass Unternehmen unterschiedliche Produktversionen erstellen, musste das gesamte System unter einer Lizenz offengelegt werden, die den Wettbewerb auf operativer Ebene ermöglicht, aber die Differenzierung der Produkteigenschaften minimiert - die GPL schien die richtige Wahl zu sein

   Wir hatten immer noch das Problem, dass sich Dienstanbieter differenzieren und den Markt untergraben konnten. Wir hatten jedoch auch eine Lösung, da unser Entwicklungsprozess testgetriebene Entwicklung verwendete und die gesamte Plattform über APIs offengelegt wurde. Im Laufe des Entwicklungsprozesses hatten wir eine umfangreiche Testsuite erstellt. Diese Testsuite sollte dazu dienen, zwischen Anbietern von Community-Plattformen (die den Code übernommen, aber in erheblichem Maße verändert haben) und zertifizierten Zimki-Anbietern (die die Testsuite erfüllt haben) zu unterscheiden. Durch die Verwendung eines markenrechtlich geschützten Bildes für Zimki-Anbieter könnten wir ein gewisses Maß an Portabilität zwischen den Anbietern erzwingen

   Durch die Schaffung dieses Marktplatzes, der von einer Open Zimki Foundation unterstützt wird, könnten wir eine Quelle der Trägheit (Abhängigkeit von einem einzigen Anbieter) überwinden und gleichzeitig Unternehmen die Möglichkeit geben, ihre eigene Plattform zunächst intern auszuprobieren und neue Möglichkeiten für uns selbst zu entwickeln, die sich aus einem Anwendungsspeicher, Marktberichten, Vermittlungsdiensten, Maklerkapazitäten, Schulungen, Support und vorgefertigten eigenständigen Zimki-Clustern ergeben. Ein solcher Ansatz würde auch unser Kapitalrisiko angesichts der bestehenden Beschränkungen reduzieren
     * Punkt 4* - wir mussten ein Ökosystem aufbauen, das es uns ermöglicht, die zukünftigen Dienste zu identifizieren, die wir erstellen sollten, und daher mussten wir ein ILC-Modell aufbauen. Offensichtlich konnten wir nur die Verbrauchsdaten derjenigen direkt beobachten, die auf unserem Dienst aufbauten, aber was ist mit anderen Zimki-Anbietern?

   Indem wir gemeinsame Dienste wie GUBE (Generic Utility Billing Engine) zusammen mit einem Anwendungsspeicher, einer Komponentenbibliothek (einem CPAN-Äquivalent) und schließlich einer Form von Brokerage-Fähigkeit bereitstellen, wollten wir mehrere Quellen für Metadaten schaffen. Wir hatten eine Menge Diskussionen darüber, ob wir es alleine machen könnten, aber ich hatte das Gefühl, dass wir nicht den Markennamen hatten. Wir mussten diesen Marktplatz schaffen, und das Potenzial war riesig. Ich hatte geschätzt, dass der gesamte Utility-Computing-Markt (d. h. Cloud Computing) ein Jahrzehnt später, im Jahr 2016, 200 Milliarden Dollar wert sein würde, und wir würden uns ein kleines Stück davon schnappen

   Unser längerfristiges Ziel war es, den Markt zu beflügeln und letztendlich eine Art von Finanzbörse aufzubauen. Um dies zu erreichen, bräuchten wir angesichts unserer Beschränkungen Hilfe von außen, aber wir beschlossen, diese Botschaft nicht zu verbreiten, da sie für die meisten "zu weit in der Zukunft und zu verrückt" war
     * Punkt 5* - wir mussten es für die Leute einfach, schnell und billig machen, ganze Anwendungen auf unserer Plattform zu entwickeln. Wir mussten rücksichtslos all das Gezeter (sinnlose, unangenehme und sich wiederholende Aufgaben) wegschneiden, das mit der Entwicklung verbunden war. Als einer aus dem Entwicklungsteam eine völlig neue Form von Wiki mit clientseitiger Vorschau baute und von der Idee bis zur Live-Schaltung im Web in weniger als einer Stunde fertig war, wusste ich, dass wir etwas mit Potenzial hatten. Pre-shaved Yaks wurde zum Schlagwort, um den Service zu beschreiben und etwas, das wir 2005 und 2006 auf unsere T-Shirts klebten
     * Punkt 6* - wir rechneten damit, dass jemand einen Dienst für die Versorgungsinfrastruktur anbieten würde. Wir mussten dies ausnutzen, indem wir darauf aufbauten. Wir waren über die Jahre ziemlich geschickt darin geworden, wertbasierte Dienste zu entwickeln (d. h. solche, für die wir einen Prozentsatz des von ihnen geschaffenen Wertes in Rechnung stellten), und ich wusste, dass wir unsere Gebühren für die Plattform mit den variablen Betriebskosten ausgleichen konnten, die durch einen Versorgungsinfrastrukturanbieter verursacht wurden

   Indem wir auf einem Versorgungsinfrastrukturdienst aufbauen, hätten wir auch den Vorteil, diesen Anbieter von allen Metadaten abzuschneiden, außer dass unsere Plattform wächst. Wenn ich das Spiel gut genug spiele, dann wäre das vielleicht ein Exit-Play für uns durch eine Übernahme. Wenn wir wirklich erfolgreich sein wollten, dann müsste ich irgendwann den Anker der Muttergesellschaft brechen
   * Punkt 7* - wir wussten, dass der Bau von Rechenzentren eine Einschränkung in der Versorgungsinfrastruktur darstellen würde und dass die Nachfrage nach Rechenleistung elastisch war. Daraus ergaben sich Optionen für ein Gegenspiel, z. B. die Schaffung eines Preiskriegs, um die Nachfrage über die Möglichkeiten eines Anbieters hinaus zu steigern. Aber um einen Anbieter gegen einen anderen auszuspielen, mussten wir den Wettbewerbern einen Weg in den Markt geben. Glücklicherweise hatten wir unser Borg-System, und obwohl wir mit einem großen, bekannten Hardware-Anbieter gesprochen hatten (der sich gegen die Idee von Utility Compute gesträubt hatte), konnten wir diesen Bereich als Open Source (Punkt 8) anbieten, um die Entstehung dieses Marktes zu fördern. Ich hatte Gegenspieler, die ich bei Bedarf einsetzen konnte, und es war zu unserem Vorteil, wenn ein fragmentierter Markt von Utility-Infrastruktur-Anbietern existierte. Wir sollten anstreben, dass kein einziges Unternehmen die Gesamtkontrolle
   über diesen Raum erlangt

   Die Option sah gut aus, basierend auf unseren Möglichkeiten. Sie lag im Bereich der Möglichkeiten und berücksichtigte die Einschränkungen, die wir hatten. Dies schien der beste Weg nach vorne zu sein. Es würde bedeuten, das Unternehmen neu auszurichten, Dienste wie unsere Online-Fotoseite zu entfernen und andere Umsatzdienste in eine Art Minimalzustand zu versetzen, bis das Plattformgeschäft so weit gewachsen war, dass wir uns von ihnen trennen konnten. Ich war bereit, den Abzug zu betätigen, aber da war noch eine letzte Sache, die ich brauchte.

