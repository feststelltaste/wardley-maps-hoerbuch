Kapitel 16.4.: Chancen multiplizieren sich, wenn sie ergriffen werden.

   Sie haben sich entschieden, das LFP-System aufzubauen und es als Sprungbrett zu nutzen, um eine zukünftige Position rund um die mitentwickelte Praxis zu entwickeln, die im Plattformbereich entstehen wird. Sie haben Ihre interne Trägheit durch Diskussionen überwunden, die Teams gebildet und dies dem Vorstand erklärt. Sie opfern einige kurzfristig erwartete Renditen für eine zukünftige Position mit dem Ziel, die Lösung neu zu verpacken und sie an andere zu verkaufen, während Sie gleichzeitig eine neue Praxis im Co-Evolved-Bereich entwickeln. Sie würfeln und es kommt heraus …​ Ergebnis 2. Oh, verdammt

   Das LFP-System läuft nicht ganz so gut, wie wir hoffen. Zum Glück für uns haben wir die Inhouse-Variante nicht eingebaut, sonst würden wir jetzt Geld verlieren und unsere Diskussionen mit dem Vorstand könnten schmackhafter werden. Das Problem bei unserer Optionsanalyse ist, dass wir keine Variabilität und Risikobereitschaft eingepreist haben. Die Inhouse-Variante war risikoreicher, weil sie nicht nur die höchste erwartete Rendite hatte, sondern auch die niedrigste - es gab eine große Spanne. In diesem Fall ist Ergebnis 2 ein Nettoverlust. Wir können das als eine zukünftige Lernlektion (oder in meinem Fall - vergangene schmerzhafte Lektion) ankreiden. Lassen Sie uns jedoch vergleichen, was mit Ergebnis 2 in beiden Varianten passiert. Angenommen, die Dinge laufen nicht so gut und sowohl das Marketing als auch die Technik sind eingetaucht und haben Vorschläge unterbreitet. Es liegen zwei Optionen auf dem Tisch. Welche, wenn überhaupt, wählen wir also?
     * Die Technik sagt, dass sie die Code-Effizienz um 75 oder 350 T€ verbessern konnten
     * Marketing sagt, sie könnten 400k zusätzliche Microsite-Besucher für $150K pro Monat hinzufügen

   Lassen Sie uns jede Variante durchgehen. In Abbildung 211 habe ich die finanziellen Auswirkungen für die Vorschläge zur Inhouse-Variante hinzugefügt
Siehe    Abbildung 211: Finanzielle Auswirkungen auf die Inhouse-Variante für mehr Details.

   Da Ergebnis 2 eintritt, werden wir dies als Basisfall verwenden und die Auswirkungen der Vorschläge hinzufügen. Das erste, was auffällt, ist, dass der Entwicklungsvorschlag den Fall nicht verbessert, sondern die Finanzen schlechter macht. Warum? Weil die Kosten bereits versenkt sind und die Ausgaben für das Refactoring den finanziellen Fall nicht verbessern, da es nichts durch die Code-Effizienz zurückzugewinnen gibt. Die einzige mögliche Rettung wäre die Freigabe von Hardware, um einen schnelleren Verkauf und weniger Abschreibung zu erreichen. Das liegt in den meisten Fällen im Bereich des Wunschdenkens. Leider ist es unter solchen Umständen oft schwer zu rechtfertigen, mehr Geld für einen Refactoring-Aufwand auszugeben. Der Marketing-Vorschlag gibt uns jedoch etwas Auftrieb. Zumindest macht er einen Teil des Schmerzes wieder wett. Unsere endgültige erwartete Rendite liegt immer noch unter unserem normalen Wert von 40, aber wir wahren ein bisschen unser Gesicht. Die Kombination aus
   Entwicklung und Marketing gibt uns die Vorteile des Marketings, aber den Verlust der Entwicklung. Es ist viel besser, nur den Marketingvorschlag zu machen

   Ok, wiederholen wir also diese Übung, aber schauen wir uns jetzt die Variante mit der öffentlichen Plattform an, die wir tatsächlich gewählt haben. Ich habe das Modell in Abbildung 212 erstellt
Siehe    Abbildung 212: Finanzielle Auswirkungen auf die öffentliche Plattformvariante für mehr Details.

   Zunächst einmal sind wir mit dem Ergebnis 2 in einer viel besseren Verfassung, weil wir diese anfänglichen versunkenen Investitionskosten nicht hatten. Aber dann passiert etwas Seltsames. Wenn Sie sich die Entwicklungsoption ansehen, indem Sie Geld für das Refactoring ausgeben, dann machen wir eine viel bessere Rendite. In der Tat, es ist eine riesige Rendite! Moment mal, wie ist das möglich? Nun, ganz einfach: Wir zahlen für den Verbrauch der Dienstplattform (wie AWS Lambda) auf der Grundlage unserer tatsächlichen Nutzung. Wenn Sie den Code effizienter gestalten, zahlen Sie weniger. Es gibt plötzlich einen finanziellen Grund für das Refactoring von Code. Es gibt viele weitere Vorteile solcher Plattformen, von der Nutzung von Services bis hin zur Wiederverwendung von Code, aber die Änderungen an der Art und Weise, wie wir Code schreiben, refaktorisieren und überwachen, sind signifikant. Darum geht es bei der Co-Evolution, und in diesem Fall ist es die Kollision zwischen Entwicklung und
   Finanzen

   Die zweite Sache, die zu beachten ist, ist, dass das Marketing ein Nettoverlust ist. Wie ist das möglich, wenn es in der Inhouse-Variante positiv ist? Auf Verbrauchsbasis übersteigen die Akquisitions- und Betriebskosten für jeden neuen Benutzer deutlich die zusätzlichen Einnahmen, die er generiert, so dass es bei diesem Akquisitionspreis ein Verlust ist. Der Marketing-Vorschlag macht in der öffentlichen Plattform-Variante keinen Sinn, weil es eine direkte Verknüpfung der tatsächlichen Kosten mit den Einnahmen gibt. Aber in der Inhouse-Variante sind die meisten Kosten für den Betrieb bereits mit der Anfangsinvestition ausgegeben worden. Es handelt sich um versunkene Kosten. In diesem Fall haben wir das meiste Geld bereits ausgegeben und wir vergleichen tatsächlich die Akquisitionskosten mit den zusätzlichen Einnahmen. Der Marketingvorschlag macht in der Inhouse-Variante genau deshalb Sinn, weil man den größten Teil der Kosten bereits verbrannt hat

   Aber Moment mal, die dritte Option von sowohl Marketing als auch Entwicklung sieht besser aus als alle anderen. Wie kann das sein? In diesem Fall bedeuten die reduzierten Kosten für jeden Benutzer des Dienstes (aufgrund des Refactorings, d. h. des Entwicklungsaufwands), dass die Gesamtkosten pro neuem Benutzer (d. h. Marketing-Akquise plus Betrieb) jetzt geringer sind als die zusätzlichen Einnahmen, die sie erzeugen. Die Summe des Ganzen ist größer als die Summe der einzelnen Teile. Daher ist die letzte Option für uns die beste Wahl und dort investieren wir. Die Verlagerung hin zu Versorgungsplattformen und Abrechnung auf funktionaler Ebene verändert Ihren gesamten Investitionsansatz in Projekten grundlegend. Von dem Unsinn, dass zusätzliche IT-Anwender Grenzkosten von Null haben (d. h. wir haben eine Menge Kosten versenkt und können sie nicht wirklich zuordnen), bis hin zu der Tatsache, dass Refactoring plötzlich zu einer finanziellen Überlegung wird. Die wahren Kosten (nicht nur für die
   Anschaffung, sondern auch für den Betrieb) des Marketings werden damit offengelegt

   Wir fangen bereits an, einige dieser mitentwickelten Praktiken zu erleben, und das sieht nach einer großen Veränderung aus. Das ist der Grund, warum ich 2005 die erste Plattform gegründet habe, aber wie Sie noch lernen werden, springen diese Möglichkeiten auf Sie zu, wenn Sie die Zukunft annehmen. Aber warum habe ich nicht weitergemacht und die Plattform neu aufgebaut, nachdem die Muttergesellschaft sich entschlossen hatte, woanders hinzugehen? Nun, ich habe eine Zeit lang an gedruckter Elektronik gearbeitet und dann einen Astronauten getroffen, aber das ist das nächste Kapitel.

