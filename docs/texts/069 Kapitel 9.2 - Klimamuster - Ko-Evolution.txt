Kapitel 9.2.: Klimamuster : Ko-Evolution

   Im Jahr 2016 dreht sich alles um "serverloses" Computing. Ich werde diesen glücklichen Umstand ausnutzen, um das Konzept der Co-Evolution zu erklären, aber zunächst müssen wir eine Zeitreise in die 80er/90er Jahre machen. Damals waren Computer vor allem ein Produkt, und die Anwendungen, die wir entwickelten, verwendeten Architekturpraktiken, die auf den Eigenschaften eines Produkts basierten, insbesondere auf der Mittelzeit bis zur Wiederherstellung (MTTR)

   Wenn ein Computer ausfiel, mussten wir ihn ersetzen oder reparieren, und das würde Zeit kosten. Die MTTR war hoch und es hatten sich architektonische Praktiken herausgebildet, um damit umzugehen. Wir bauten Maschinen mit N 1 (d. h. redundante Komponenten wie mehrere Netzteile). Wir führten Disaster-Recovery-Tests durch, um sicherzustellen, dass unsere Ausfallsicherheit funktionierte. Wir kümmerten uns sehr um die Kapazitätsplanung und die Skalierung einzelner Maschinen (Scale-up). Wir kümmerten uns sehr um Dinge, die Fehler einführen könnten, und wir hatten Verfahren zur Änderungskontrolle, um dies zu verhindern. Normalerweise bauten wir Testumgebungen, um Dinge auszuprobieren, bevor wir in Versuchung kamen, die wichtige Produktionsumgebung zu verändern

   Aber diese Praktiken sind nicht einfach über Nacht auf magische Weise entstanden, sondern haben sich durch Versuch und Irrtum entwickelt. Sie begannen als neuartige Praktiken, dann tauchten dominantere, aber abweichende Formen auf, bis wir schließlich eine Art von Konsens erreichten. Die Techniken konvergierten und eine gute Praxis war geboren. Das Gleiche geschah mit der Buchhaltung, mit der Fertigung, mit der Personalabteilung und jeder anderen Geschäftspraxis, die Sie sich vorstellen können. Letztendlich wurden diese architektonischen Praktiken verfeinert und die beste architektonische Praxis entwickelt. In diesen zuversichtlichen Tagen wurde man dafür verspottet, dass man keine ordentliche Kapazitätsplanung durchgeführt hatte, da dies eine erwartete Norm war

   Unsere Anwendungen benötigten architektonische Praktiken, die auf (benötigter) Rechenleistung basierten, die als Produkt bereitgestellt wurde. Die architektonischen Normen, die zu "Best Practice" wurden, waren N 1, Scale-up, Disaster Recovery, Änderungskontrolle und Testumgebungen und diese wurden letztendlich von der hohen MTTR eines Produkts abgeleitet. Ich habe diese Entwicklung der Praxis in der Karte unten dargestellt
Siehe    Abbildung 97: Entwicklung der architektonischen Praxis für mehr Details.

   Normalerweise verwende ich bei Mäps nur die Beschreibung der Evolution für Aktivitäten. Diese Evolution ist bei der Praxis genau dasselbe, nur mit etwas anderen Begriffen, z.B. neuartig, aufstrebend, gut und am besten statt Genese, Brauch, Produkt und Ware. Für Hintergrundinformationen dazu siehe [128]figure 10 ([129]Chapter 2)

   Die Sache ist die: Compute hat sich entwickelt. Als Aktivität hatte Compute damals in den 1940er Jahren in jenem unerforschten Raum begonnen (die Genese der Handlung), in dem alles ungewiss ist. Dann gab es speziell angefertigte Beispiele (divergente Formen) und dann Produkte (Konvergenz um bestimmte Merkmale mit einer gewissen Differenzierung zwischen ihnen). In den frühen 2000er Jahren begann sich die Datenverarbeitung jedoch zu wandeln und wurde immer mehr zur Massenware, wobei die Differenzierung viel stärker eingeschränkt wurde und die Tätigkeit selbst viel stärker definiert wurde. In dieser Welt ging es bei einem Server wirklich um Prozessorgeschwindigkeit, Arbeitsspeicher, Festplattengröße, Stromverbrauch und wie viele man in ein Rack packen konnte. In dieser Welt bauten wir Rechenbanken und erstellten virtuelle Maschinen, wenn wir sie brauchten. Dann bekamen wir mit der Ankunft von AWS EC2 im Jahr 2006 öffentliche Versorgungsformen

   Die stärker industrialisierten Formen jeder Aktivität haben andere Eigenschaften als die frühen, sich entwickelnden Versionen. Bei der Computerinfrastruktur hatten die damaligen Utility-Formen ähnliche Verarbeitungs-, Speicher- und Ablagemöglichkeiten, aber sie hatten eine sehr niedrige MTTR. Wenn ein virtueller Server kaputt ging, machten wir uns nicht die Mühe, ihn zu reparieren, wir bestellten keinen neuen, wir riefen einfach eine API auf und innerhalb von Minuten oder Sekunden hatten wir einen neuen. Die Zeiten, in denen wir unseren Servern liebevolle Namen gaben, waren lange vorbei, das waren keine Haustiere, sondern Vieh

   Diese Änderung der Eigenschaften ermöglichte die Entstehung einer neuen Reihe von Architekturprinzipien, die auf einer niedrigen MTTR basieren. Wir kümmerten uns nicht mehr um N 1 und die Ausfallsicherheit einzelner Maschinen, da wir sie schnell wiederherstellen konnten, wenn ein Fehler entdeckt wurde. Stattdessen haben wir uns auf Ausfälle eingestellt. Wir lösten die Skalierung, indem wir die Arbeitslast verteilten und mehr Maschinen aufriefen, wenn wir sie brauchten - wir waren vom Scale-up zum Scale-out übergegangen. Wir reservierten sogar dieses wissende Glucksen für diejenigen, die in dieser Welt des Überflusses "Kapazitätsplanung" betrieben
Siehe    Abbildung 98: Entstehen einer neuen Praxis für mehr Details.

   Wir begannen, das Scheitern durch die ständige Einführung von Fehlern zu testen - wir schufen verschiedene Formen von Chaos-Affen oder Meistern der Katastrophen, die zufällige Fehler in unsere Umgebungen einführten. Einmalige Disaster-Recovery-Tests waren etwas für Schwächlinge, wir passten uns ständig an den Ausfall an. Mit einer viel flexibleren Umgebung lernten wir, Änderungen schneller zurückzunehmen, wir wurden sicherer in unseren Ansätzen und begannen, Continuous Deployment zu nutzen. Wir runzelten die Stirn über diejenigen, die an den heiligen Produktions- und weniger geheiligten Testumgebungen festhielten. Wir begannen, sie zu verhöhnen

   Diese neuartigen Praktiken - Scale-Out, Design for Failure, Chaos-Engines und Continuous Deployment u.a. - wurden aus einer zunehmend niedrigen MTTR-Umgebung abgeleitet und solche Praktiken wurden durch Utility-Computing-Umgebungen einfach beschleunigt. Unsere Anwendungen wurden in diesem Sinne entwickelt. Die neuartigen Praktiken verbreiteten sich, wurden emergent (verschiedene Formen der gleichen Prinzipien) und haben langsam begonnen, sich zu einem Konsens über gute Praktiken zusammenzufinden. Wir haben dem Ganzen sogar einen Namen gegeben: DevOps. Es entwickelt sich immer noch weiter und es wird wiederum zur besten architektonischen Praxis werden

   Was passiert ist, ist als Ko-Evolution bekannt, d. h. eine Praxis entwickelt sich mit der Aktivität selbst mit. Das ist völlig normal und geschieht im Laufe der Geschichte. Obwohl die Stahlherstellung selbst industrialisiert wurde, können wir immer noch Schwerter herstellen (wenn wir wollen), aber wir haben die frühe Praxis des Schmiedens von Schwertern verloren. Eine Reihe von Praktiken wurde durch eine andere ersetzt. Ich habe den aktuellen Stand der Ko-Evolution im Computerbereich in der Karte unten dargestellt. Die ehemals beste architektonische Praxis nennen wir jetzt "Legacy", während die gute (und sich noch entwickelnde) architektonische Praxis "Devops" genannt wird
Siehe    Abbildung 99: Co-Evolution von DevOps für mehr Details.

   Diese Transformation der Praxis ist auch mit Trägheit verbunden, d. h. wir gewöhnen uns an die "alte" und vertraute beste Praxis (die auf einer Reihe von Merkmalen basiert) und die "neue" Praxis (die auf einer weiterentwickelten zugrunde liegenden Aktivität basiert) ist weniger sicher, erfordert Lernen und Investitionen. Daher gibt es oft eine Trägheit gegenüber der zugrundeliegenden Veränderung, die auf die Unternehmensführung zurückzuführen ist. Dies war eine der Hauptursachen für die Trägheit gegenüber Cloud Computing

   Darüber hinaus fehlen allen Anwendungen, die auf der "alten" Best Practice basieren, die Vorteile dieser neuen, weiterentwickelten Welt. Zu diesen Vorteilen der Industrialisierung gehören immer auch Effizienz, Schnelligkeit der Agilität und Geschwindigkeit der Entwicklung neuer Dinge. Unsere bestehenden Anwendungen wurden zum Vermächtnis unserer vergangenen Arbeitsweise, Teil des Unternehmenskorpus. Sie mussten neu archiviert werden, aber das ist mit Kosten verbunden, und so versuchen wir, Wege zu zaubern, die neue Welt zu haben, aber genauso wie die Vergangenheit. Wir wollen alle Vorteile des Massenbetriebs und der Commodity-Komponenten, aber mit maßgeschneiderter Hardware, die nur für uns entwickelt wurde! Das funktioniert nicht, die Red Queen zwingt uns schließlich zur Anpassung. Wir kämpfen aber oft zu lange dagegen an

   Diese Art von Ko-Evolution und die unvermeidliche Dominanz einer weiter entwickelten Praxis ist sehr vorhersehbar. Wir können sie nutzen, um neu entstehende Organisationsformen zu antizipieren und auch die Veränderungen in der Praxis vorwegzunehmen, bevor sie uns treffen. So wussten wir bei Canonical im Jahr 2008, dass wir uns auf die aufkommende DevOps-Welt konzentrieren und sicherstellen mussten, dass alle (oder so viele wie möglich), die in diesem Bereich arbeiteten, an Ubuntu arbeiteten - aber das ist ein späteres Kapitel. Es reicht zu wissen, dass wir diese Veränderung zu unserem eigenen Vorteil ausgenutzt haben. Wie mir ein CIO kürzlich erzählte, war an einem Tag RedHat in aller Munde und am nächsten war alles Cloud plus Ubuntu. Das ist nicht zufällig passiert.

