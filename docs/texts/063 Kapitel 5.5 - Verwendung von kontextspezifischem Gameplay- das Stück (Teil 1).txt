Kapitel 5.5.: Verwendung von kontextspezifischem Gameplay: das Stück

   An diesem Punkt, mit einigen kontextspezifischen Spielereien in der Hand, begann ich, mit James, meinem XO und meinem Chief Scientist in unserem Sitzungssaal ein paar Szenarien durchzuspielen. Unser Plan begann sich zu verdichten und wurde durch verschiedene Experimente, die das Unternehmen durchgeführt hatte, erweitert. Nicht zuletzt kam der Leiter meines Frameworks-Teams herein, um mir mitzuteilen, dass sie gerade demonstriert hatten, dass wir ganze Anwendungen (Frontend und Backend) in Javascript entwickeln können

   Gleichzeitig mit der Verfeinerung unseres Spiels hatte ich die Gruppe ermutigt, Komponentendienste unter dem Namen LibApi zu entwickeln, wie in Befreiungs-API, d. h. unsere Freiheit von endlos wiederholten Aufgaben und unserem bestehenden Geschäftsmodell. Zu sagen, dass ich von diesem Experiment hingerissen war, wäre eine Untertreibung meiner reinen Freude. Dieses zufällige Ereignis half, den Plan zu zementieren, der in Abbildung 57 zusammengefasst ist. Ich werde ihn aufschlüsseln und jeden Punkt im Detail durchgehen
Siehe    Abbildung 57: Der Plan für mehr Details.
      Punkt 1 - der Schwerpunkt des Unternehmens läge auf der Bereitstellung einer Code-Ausführungsplattform als Dienstprogramm neben einem wachsenden Angebot an industrialisierten Komponentendiensten für gängige Aufgaben wie Abrechnung, Messaging, einem Objektspeicher (einer Key-Object-Store-API), E-Mail usw. Alle Komponenten würden über öffentliche APIs zugänglich gemacht werden und der Dienst würde die Möglichkeit bieten, ganze Anwendungen in einer einzigen Sprache - JavaScript - zu entwickeln. Die Wahl fiel auf JavaScript wegen seiner häufigen Verwendung, der Sicherheit der JS-Engine und der Beseitigung von Übersetzungsfehlern, da sowohl der Front- als auch der Backend-Code in derselben Sprache erstellt werden. Die gesamte Umgebung würde auf der Basis von JavaScript-Operationen, Netzwerknutzung und Speicherplatz abgerechnet werden. Es gäbe kein Konzept einer physischen oder virtuellen Maschine
      Punkt 2 - um die Entwicklung der Plattform zu beschleunigen, würde der gesamte Dienst Open-Source sein. Dies würde es auch anderen Unternehmen ermöglichen, konkurrierende Dienste einzurichten, aber dies war geplant und wünschenswert
      Punkt 3 - das Ziel war nicht, einen einzigen Zimki-Dienst (der Name für unsere Plattform) zu schaffen, sondern einen wettbewerbsfähigen Marktplatz von Anbietern. Wir wollten ein kleines, aber lukratives Stück eines sehr großen Kuchens ergattern, indem wir den Markt mit unserem eigenen Versorgungsdienst säen und dann die Technologie als Open-Sourcing anbieten. Um zu verhindern, dass Unternehmen unterschiedliche Produktversionen erstellen, musste das gesamte System unter einer Lizenz offengelegt werden, die den Wettbewerb auf operativer Ebene ermöglicht, aber die Differenzierung der Produkteigenschaften minimiert - die GPL schien die richtige Wahl zu sein

   Wir hatten immer noch das Problem, dass sich Dienstanbieter differenzieren und den Markt untergraben konnten. Wir hatten jedoch auch eine Lösung, da unser Entwicklungsprozess testgetriebene Entwicklung verwendete und die gesamte Plattform über APIs offengelegt wurde. Im Laufe des Entwicklungsprozesses hatten wir eine umfangreiche Testsuite erstellt. Diese Testsuite sollte dazu dienen, zwischen Anbietern von Community-Plattformen (die den Code übernommen, aber in erheblichem Maße verändert haben) und zertifizierten Zimki-Anbietern (die die Testsuite erfüllt haben) zu unterscheiden. Durch die Verwendung eines markenrechtlich geschützten Bildes für Zimki-Anbieter könnten wir ein gewisses Maß an Portabilität zwischen den Anbietern erzwingen

   Durch die Schaffung dieses Marktplatzes, der von einer Open Zimki Foundation unterstützt wird, könnten wir eine Quelle der Trägheit (Abhängigkeit von einem einzigen Anbieter) überwinden und gleichzeitig Unternehmen die Möglichkeit geben, ihre eigene Plattform zunächst intern auszuprobieren und neue Möglichkeiten für uns selbst zu entwickeln, die sich aus einem Anwendungsspeicher, Marktberichten, Vermittlungsdiensten, Maklerkapazitäten, Schulungen, Support und vorgefertigten eigenständigen Zimki-Clustern ergeben. Ein solcher Ansatz würde auch unser Kapitalrisiko angesichts der bestehenden Beschränkungen reduzieren
      Punkt 4 - wir mussten ein Ökosystem aufbauen, das es uns ermöglicht, die zukünftigen Dienste zu identifizieren, die wir erstellen sollten, und daher mussten wir ein ILC-Modell aufbauen. Offensichtlich konnten wir nur die Verbrauchsdaten derjenigen direkt beobachten, die auf unserem Dienst aufbauten, aber was ist mit anderen Zimki-Anbietern?

