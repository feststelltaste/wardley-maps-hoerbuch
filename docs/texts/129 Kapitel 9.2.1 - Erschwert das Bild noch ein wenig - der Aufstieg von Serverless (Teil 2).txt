   Der nächste banale Punkt ist, dass es ein weitaus höheres Maß an Wiederverwendung fördert. Eines der Probleme in der alten objektorientierten Welt war, dass es keinen effektiven Kommunikationsmechanismus gab, um zu zeigen, was gebaut worden war. Oft wurden Objekte und Funktionen innerhalb eines Unternehmens dupliziert, ganz zu schweigen von denen zwischen Unternehmen. Auch hier ermutigt die Offenlegung als Webdienste dazu, dies zu ändern. Das setzt voraus, dass jemand den Sinn hat, einen Erkennungsmechanismus wie z. B. ein Dienstregister zu erstellen

   Ein weiterer, wiederum eher trivialer Punkt ist, dass es den Entwickler weiter von den Problemen der zugrunde liegenden Infrastruktur abstrahiert. Es ist nicht wirklich "serverlos", sondern eher "es ist mir egal, was ein Server ist". Wie bei jedem Prozess der Industrialisierung (ein Wechsel von Produkt- zu Commodity- und Utility-Formen) liegen die Vorteile nicht nur in der Effizienz der zugrunde liegenden Komponenten, sondern auch in der Beschleunigung der Geschwindigkeit, mit der ich neue Dinge entwickeln kann. Wie bei jeder anderen Industrialisierung wird es endlose Runden der Trägheit geben, die durch vergangene Praktiken verursacht wird. Erwarten Sie viel Zähneknirschen über die Vorteile der Anpassung Ihrer Infrastruktur an Ihre Plattform und …​ drehen Sie einfach die Uhr zurück zu Infrastructure as a Service im Jahr 2007 und Sie werden die gleichen Argumente in einem etwas anderen Kontext hören

   Wie auch immer, zurück zur Old Street (wo die Firma war) und den Tagen von 2005. Mit Zimki baute ich eine kleine Handelsplattform in einem Tag oder so, weil ich so viele Funktionen wiederverwenden konnte, die von anderen erstellt wurden. Ich musste mir keine Gedanken über den Aufbau einer Plattform machen und das Konzept eines Servers, Kapazitätsplanung und all das "Gequatsche" war weit weg von meinen Gedanken. Die Effizienz, die Schnelligkeit der Agilität und die Geschwindigkeit der Entwicklung sind einfach eine Selbstverständlichkeit. Allerdings sind diese Änderungen nicht wirklich die spannenden Teile. Der Killer, das "gotcha" ist die Abrechnung nach Funktion. Dies ändert die Art und Weise, wie Sie die Überwachung durchführen, grundlegend und ermöglicht Konzepte wie die wertbasierte Entwicklung (siehe [134]chapter 8). Die Überwachung nach Funktionskosten verändert die Art und Weise, wie wir arbeiten - nun, es hat mich verändert und ich bin mir ziemlich sicher, dass dies Auswirkungen auf
   alle von Ihnen hat

   "Serverless" wird die Art und Weise, wie wir das Geschäft rund um die Technologie aufbauen und wie Sie programmieren, grundlegend verändern. Es wird eine ganz neue Reihe von Praktiken schaffen und Ihre Zukunft im Jahr 2016 sieht eher wie Abbildung 102 aus (nehmen Sie einfach die Co-Evolution of Architectural Practice-Karte von oben und entfernen Sie die Legacy-Linien). Natürlich ist das noch nicht passiert, aber durch die einfache Wiederanwendung eines allgemeinen Musters der Ko-Evolution kann ich eine ziemlich vernünftige Aussage für die Zukunft machen. Ich kann die Ko-Evolution nutzen, um eine Veränderung zu antizipieren
Siehe    Abbildung 102: Die Zukunft der Plattform für mehr Details.

   Angesichts unseres Wissens über dieses klimatische Muster fügen wir also die Ko-Evolution auf unserer Karte der Antizipation hinzu - siehe Abbildung 103 - und fügen Punkt 7 für die Ko-Evolution hinzu. Ich habe die Karte für jede beliebige Aktivität README.md verallgemeinert, ausgehend von einer frühen Version A[1] zu einer späteren, weiter entwickelten Handlung A[1 n] nach n Iterationen, jede mit ihrer eigenen Diffusionskurve. Dies führt sowohl zu mitentwickelter Praxis CONTRIBUTING.md als auch zu neuen Formen von Aktivitäten CODE_OF_CONDUCT.md CONTRIBUTING.md LICENCE.md
Siehe    Abbildung 103: Erweiterung der Antizipation mit Co-Evolution für mehr Details.

   Das obige ist bemerkenswert mächtig und erlaubt uns, unseren ersten Wirtschaftszyklus einzuführen, ein klimatisches Muster, das als Frieden, Krieg und Wunder bekannt ist


