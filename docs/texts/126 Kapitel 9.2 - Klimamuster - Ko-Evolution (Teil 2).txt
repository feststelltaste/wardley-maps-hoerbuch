   Diese Änderung der Eigenschaften ermöglichte die Entstehung einer neuen Reihe von Architekturprinzipien, die auf einer niedrigen MTTR basieren. Wir kümmerten uns nicht mehr um N 1 und die Ausfallsicherheit einzelner Maschinen, da wir sie schnell wiederherstellen konnten, wenn ein Fehler entdeckt wurde. Stattdessen haben wir uns auf Ausfälle eingestellt. Wir lösten die Skalierung, indem wir die Arbeitslast verteilten und mehr Maschinen aufriefen, wenn wir sie brauchten - wir waren vom Scale-up zum Scale-out übergegangen. Wir reservierten sogar dieses wissende Glucksen für diejenigen, die in dieser Welt des Überflusses "Kapazitätsplanung" betrieben
Siehe    Abbildung 98: Entstehen einer neuen Praxis für mehr Details.

   Wir begannen, das Scheitern durch die ständige Einführung von Fehlern zu testen - wir schufen verschiedene Formen von Chaos-Affen oder Meistern der Katastrophen, die zufällige Fehler in unsere Umgebungen einführten. Einmalige Disaster-Recovery-Tests waren etwas für Schwächlinge, wir passten uns ständig an den Ausfall an. Mit einer viel flexibleren Umgebung lernten wir, Änderungen schneller zurückzunehmen, wir wurden sicherer in unseren Ansätzen und begannen, Continuous Deployment zu nutzen. Wir runzelten die Stirn über diejenigen, die an den heiligen Produktions- und weniger geheiligten Testumgebungen festhielten. Wir begannen, sie zu verhöhnen

   Diese neuartigen Praktiken - Scale-Out, Design for Failure, Chaos-Engines und Continuous Deployment u.a. - wurden aus einer zunehmend niedrigen MTTR-Umgebung abgeleitet und solche Praktiken wurden durch Utility-Computing-Umgebungen einfach beschleunigt. Unsere Anwendungen wurden in diesem Sinne entwickelt. Die neuartigen Praktiken verbreiteten sich, wurden emergent (verschiedene Formen der gleichen Prinzipien) und haben langsam begonnen, sich zu einem Konsens über gute Praktiken zusammenzufinden. Wir haben dem Ganzen sogar einen Namen gegeben: DevOps. Es entwickelt sich immer noch weiter und es wird wiederum zur besten architektonischen Praxis werden

   Was passiert ist, ist als Ko-Evolution bekannt, d. h. eine Praxis entwickelt sich mit der Aktivität selbst mit. Das ist völlig normal und geschieht im Laufe der Geschichte. Obwohl die Stahlherstellung selbst industrialisiert wurde, können wir immer noch Schwerter herstellen (wenn wir wollen), aber wir haben die frühe Praxis des Schmiedens von Schwertern verloren. Eine Reihe von Praktiken wurde durch eine andere ersetzt. Ich habe den aktuellen Stand der Ko-Evolution im Computerbereich in der Karte unten dargestellt. Die ehemals beste architektonische Praxis nennen wir jetzt "Legacy", während die gute (und sich noch entwickelnde) architektonische Praxis "Devops" genannt wird
Siehe    Abbildung 99: Co-Evolution von DevOps für mehr Details.

   Diese Transformation der Praxis ist auch mit Trägheit verbunden, d. h. wir gewöhnen uns an die "alte" und vertraute beste Praxis (die auf einer Reihe von Merkmalen basiert) und die "neue" Praxis (die auf einer weiterentwickelten zugrunde liegenden Aktivität basiert) ist weniger sicher, erfordert Lernen und Investitionen. Daher gibt es oft eine Trägheit gegenüber der zugrundeliegenden Veränderung, die auf die Unternehmensführung zurückzuführen ist. Dies war eine der Hauptursachen für die Trägheit gegenüber Cloud Computing

   Darüber hinaus fehlen allen Anwendungen, die auf der "alten" Best Practice basieren, die Vorteile dieser neuen, weiterentwickelten Welt. Zu diesen Vorteilen der Industrialisierung gehören immer auch Effizienz, Schnelligkeit der Agilität und Geschwindigkeit der Entwicklung neuer Dinge. Unsere bestehenden Anwendungen wurden zum Vermächtnis unserer vergangenen Arbeitsweise, Teil des Unternehmenskorpus. Sie mussten neu archiviert werden, aber das ist mit Kosten verbunden, und so versuchen wir, Wege zu zaubern, die neue Welt zu haben, aber genauso wie die Vergangenheit. Wir wollen alle Vorteile des Massenbetriebs und der Commodity-Komponenten, aber mit maßgeschneiderter Hardware, die nur für uns entwickelt wurde! Das funktioniert nicht, die Red Queen zwingt uns schließlich zur Anpassung. Wir kämpfen aber oft zu lange dagegen an

